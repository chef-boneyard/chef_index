%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92 -*-
%% ex: ts=4 sw=4 et

query <- star_star / (expression / space)* %{
    ?i2b(Node)
%};

star_star <- "*:*" ~;

expression <- operation / group / field_phrase / field / field_range / term / string ~;

term <- keyword valid_letter+ / !keyword valid_letter+ %{
    ?i2b(Node)
%};

field <- name:field_name ":" arg:(fuzzy_op / term / group / string) %{
    ?i2b([<<"content:">>, ?gv(name, Node), <<"__=__">>, ?gv(arg, Node)])
%};

field_phrase <- name:field_name ':' '"' str:(term (space term)*) '"' %{
    P = ?gv(str, Node),
    ?i2b([<<"content:\"">>, ?gv(name, Node), <<"__=__">>, P, <<"\"">>])
%};

field_range <- field_name ":" (("[" range_entry " TO " range_entry "]") /
                               ("{" range_entry " TO " range_entry "}")) %{
    % FIXME: this needs a cleanup
    case Node of
        [FieldName, <<":">>, [<<"[">>, <<"*">>, <<" TO ">>, <<"*">>, <<"]">>]] ->
            ?i2b([<<"content:">>, FieldName, <<"__=__*">>]);
        [FieldName, <<":">>, [<<"{">>, <<"*">>, <<" TO ">>, <<"*">>, <<"}">>]] ->
            ?i2b([<<"content:">>, FieldName, <<"__=__*">>]);

        [FieldName, <<":">>, [<<"[">>, S, <<" TO ">>, <<"*">>, <<"]">>]] ->
            ?i2b([<<"content:[">>, FieldName, <<"__=__">>, S, <<" TO ">>,
                  FieldName, <<"__=__\\ufff0]">>]);
        [FieldName, <<":">>, [<<"{">>, S, <<" TO ">>, <<"*">>, <<"}">>]] ->
            ?i2b([<<"content:{">>, FieldName, <<"__=__">>, S, <<" TO ">>,
                  FieldName, <<"__=__\\ufff0}">>]);

        [FieldName, <<":">>, [<<"[">>, <<"*">>, <<" TO ">>, E, <<"]">>]] ->
            ?i2b([<<"content:[">>, FieldName, <<"__=__">>, <<" TO ">>,
                  FieldName, <<"__=__">>, E, <<"]">>]);
        [FieldName, <<":">>, [<<"{">>, <<"*">>, <<" TO ">>, E, <<"}">>]] ->
            ?i2b([<<"content:{">>, FieldName, <<"__=__">>, <<" TO ">>,
                  FieldName, <<"__=__">>, E, <<"}">>]);
        
        [FieldName, <<":">>, [<<"[">>, S, <<" TO ">>, E, <<"]">>]] ->
            ?i2b([<<"content:[">>, FieldName, <<"__=__">>, S, <<" TO ">>,
                  FieldName, <<"__=__">>, E, <<"]">>]);
        [FieldName, <<":">>, [<<"{">>, S, <<" TO ">>, E, <<"}">>]] ->
            ?i2b([<<"content:{">>, FieldName, <<"__=__">>, S, <<" TO ">>,
                  FieldName, <<"__=__">>, E, <<"}">>])
    end
%};

field_name <- !keyword valid_letter+ %{
    ?i2b(Node)
%};

range_entry <- "*" / valid_letter+ ~;

group <- '(' group:query ')' %{
    [<<"(">>, ?gv(group, Node), <<")">>]
%};

operation <- binary_op / unary_op / fuzzy_op / boost_op ~;

binary_op <- lhs:(group / field_phrase / field  / field_range / term) space? op:bool_op space? rhs:query %{
    ?i2b([?gv(lhs, Node), <<" ">>, ?gv(op, Node), <<" ">>, ?gv(rhs, Node)])
%};

bool_op <- 'AND' / '&&' / 'OR' / '||' ~;

unary_op <- not_op / required_op / prohibited_op ~;

not_op <- ((op:'NOT' space) / (op:'!' space?)) arg:(group / field / field_range / term / string) %{
    Op = ?gv(op, hd(Node)),
    Spc = case tl(hd(Node)) of
              [] -> <<"">>;
              [S] -> S
          end,
    [Op, Spc, ?gv(arg, tl(Node))]
%};

required_op <- !valid_letter op:'+' arg:(term / string) %{
    ?i2b([?gv(op, Node), ?gv(arg, Node)])
%};

prohibited_op <- !valid_letter op:'-' arg:(field / field_range / term / string) %{
    ?i2b([?gv(op, Node), ?gv(arg, Node)])
%};

boost_op <- arg:(term / string) '^' param:fuzzy_param %{
    ?i2b([?gv(arg, Node), <<"^">>, ?gv(param, Node)])
%};

fuzzy_op <- arg:(term / string) '~' param:fuzzy_param? %{
    case ?gv(param, Node) of
        [] -> [?gv(arg, Node), <<"~">>];
        Param -> [?gv(arg, Node), <<"~">>, Param]
    end
%};

fuzzy_param <- [0-9]+ ('.' [0-9])? ~;

string <- '"' str:(term (space term)*) '"' %{
    ?i2b([<<"\"">>, ?gv(str, Node), <<"\"">>])
%};

keyword <- "AND" / "OR" / "NOT" ~;


valid_letter <- start_letter+ ([a-zA-Z0-9*?@_+./-] / '\\' special_char)* ~;

start_letter <- [a-zA-Z0-9_.*/] / '\\' special_char ~;

space <- [ \t]+ ~;

special_char <- '[' / ']' / '\\' / [!(){}^"~*?:] ~;

%{
%% @author Seth Falcon <seth@opscode.com>
%% Copyright 2011-2012 Opscode, Inc. All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%

-define(i2b(X), iolist_to_binary(X)).
-define(gv(X, L), proplists:get_value(X, L)).

% make sure these atoms are available.
-define(or_op1, 'OR').
-define(or_op2, '||').
-define(and_op1, 'AND').
-define(and_op2, '&&').
-define(not_op, 'NOT').
-define(not_bang_op, '!').
%}
